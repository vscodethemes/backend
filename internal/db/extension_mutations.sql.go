// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: extension_mutations.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const upsertExtension = `-- name: UpsertExtension :one
insert into "extensions" (
  "vsc_extension_id", 
  "name", 
  "display_name", 
  "short_description", 
  "publisher_id",
  "publisher_name",
  "publisher_display_name",
  "installs", 
  "trending_daily",
  "trending_weekly",
  "trending_monthly",
  "weighted_rating",
  "published_at",
  "released_at"
)
values (
  $1, 
  $2, 
  $3, 
  $4, 
  $5,
  $6,
  $7,
  $8, 
  $9,
  $10,
  $11,
  $12,
  $13,
  $14
)
on conflict("vsc_extension_id") do update set
  "name" = excluded."name",
  "display_name" = excluded."display_name",
  "short_description" = excluded."short_description",
  "publisher_id" = excluded."publisher_id",
  "publisher_name" = excluded."publisher_name",
  "publisher_display_name" = excluded."publisher_display_name",
  "installs" = excluded."installs",
  "trending_daily" = excluded."trending_daily",
  "trending_weekly" = excluded."trending_weekly",
  "trending_monthly" = excluded."trending_monthly",
  "weighted_rating" = excluded."weighted_rating",
  "published_at" = excluded."published_at",
  "released_at" = excluded."released_at",
  "updated_at" = now()
returning id, vsc_extension_id, name, display_name, short_description, publisher_id, publisher_name, publisher_display_name, installs, trending_daily, trending_weekly, trending_monthly, weighted_rating, published_at, released_at, created_at, updated_at
`

type UpsertExtensionParams struct {
	VscExtensionID       string
	Name                 string
	DisplayName          string
	ShortDescription     pgtype.Text
	PublisherID          string
	PublisherName        string
	PublisherDisplayName string
	Installs             int32
	TrendingDaily        pgtype.Numeric
	TrendingWeekly       pgtype.Numeric
	TrendingMonthly      pgtype.Numeric
	WeightedRating       pgtype.Numeric
	PublishedAt          pgtype.Timestamp
	ReleasedAt           pgtype.Timestamp
}

func (q *Queries) UpsertExtension(ctx context.Context, arg UpsertExtensionParams) (Extension, error) {
	row := q.db.QueryRow(ctx, upsertExtension,
		arg.VscExtensionID,
		arg.Name,
		arg.DisplayName,
		arg.ShortDescription,
		arg.PublisherID,
		arg.PublisherName,
		arg.PublisherDisplayName,
		arg.Installs,
		arg.TrendingDaily,
		arg.TrendingWeekly,
		arg.TrendingMonthly,
		arg.WeightedRating,
		arg.PublishedAt,
		arg.ReleasedAt,
	)
	var i Extension
	err := row.Scan(
		&i.ID,
		&i.VscExtensionID,
		&i.Name,
		&i.DisplayName,
		&i.ShortDescription,
		&i.PublisherID,
		&i.PublisherName,
		&i.PublisherDisplayName,
		&i.Installs,
		&i.TrendingDaily,
		&i.TrendingWeekly,
		&i.TrendingMonthly,
		&i.WeightedRating,
		&i.PublishedAt,
		&i.ReleasedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
